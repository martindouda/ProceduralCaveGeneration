#pragma kernel MarchingCubesKernel
#define GROUP_SIZE_X 8
#define GROUP_SIZE_Y 8
#define GROUP_SIZE_Z 8

// Define the connections between vertices to form edges of the cube
static const int edgeConnections[24] = {
    0, 1, 1, 2, 2, 3, 3, 0,
    4, 5, 5, 6, 6, 7, 7, 4,
    0, 4, 1, 5, 2, 6, 3, 7
};

// Define the coordinates of the corners of the cube
static const float3 cubeCorners[8] = {
    float3(0, 0, 1),
    float3(1, 0, 1),
    float3(1, 0, 0),
    float3(0, 0, 0),
    float3(0, 1, 1),
    float3(1, 1, 1),
    float3(1, 1, 0),
    float3(0, 1, 0)
};

static const int triTable[2460] = {
        0, 8, 3, 
        0, 1, 9, 
        1, 8, 3, 9, 8, 1, 
        1, 2, 10, 
        0, 8, 3, 1, 2, 10, 
        9, 2, 10, 0, 2, 9, 
        2, 8, 3, 2, 10, 8, 10, 9, 8, 
        3, 11, 2, 
        0, 11, 2, 8, 11, 0, 
        1, 9, 0, 2, 3, 11, 
        1, 11, 2, 1, 9, 11, 9, 8, 11, 
        3, 10, 1, 11, 10, 3, 
        0, 10, 1, 0, 8, 10, 8, 11, 10, 
        3, 9, 0, 3, 11, 9, 11, 10, 9, 
        9, 8, 10, 10, 8, 11, 
        4, 7, 8, 
        4, 3, 0, 7, 3, 4, 
        0, 1, 9, 8, 4, 7, 
        4, 1, 9, 4, 7, 1, 7, 3, 1, 
        1, 2, 10, 8, 4, 7, 
        3, 4, 7, 3, 0, 4, 1, 2, 10, 
        9, 2, 10, 9, 0, 2, 8, 4, 7, 
        2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, 
        8, 4, 7, 3, 11, 2, 
        11, 4, 7, 11, 2, 4, 2, 0, 4, 
        9, 0, 1, 8, 4, 7, 2, 3, 11, 
        4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, 
        3, 10, 1, 3, 11, 10, 7, 8, 4, 
        1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, 
        4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, 
        4, 7, 11, 4, 11, 9, 9, 11, 10, 
        9, 5, 4, 
        9, 5, 4, 0, 8, 3, 
        0, 5, 4, 1, 5, 0, 
        8, 5, 4, 8, 3, 5, 3, 1, 5, 
        1, 2, 10, 9, 5, 4, 
        3, 0, 8, 1, 2, 10, 4, 9, 5, 
        5, 2, 10, 5, 4, 2, 4, 0, 2, 
        2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, 
        9, 5, 4, 2, 3, 11, 
        0, 11, 2, 0, 8, 11, 4, 9, 5, 
        0, 5, 4, 0, 1, 5, 2, 3, 11, 
        2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, 
        10, 3, 11, 10, 1, 3, 9, 5, 4, 
        4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, 
        5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, 
        5, 4, 8, 5, 8, 10, 10, 8, 11, 
        9, 7, 8, 5, 7, 9, 
        9, 3, 0, 9, 5, 3, 5, 7, 3, 
        0, 7, 8, 0, 1, 7, 1, 5, 7, 
        1, 5, 3, 3, 5, 7, 
        9, 7, 8, 9, 5, 7, 10, 1, 2, 
        10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, 
        8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, 
        2, 10, 5, 2, 5, 3, 3, 5, 7, 
        7, 9, 5, 7, 8, 9, 3, 11, 2, 
        9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, 
        2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, 
        11, 2, 1, 11, 1, 7, 7, 1, 5, 
        9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, 
        5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, 
        11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, 
        11, 10, 5, 7, 11, 5, 
        10, 6, 5, 
        0, 8, 3, 5, 10, 6, 
        9, 0, 1, 5, 10, 6, 
        1, 8, 3, 1, 9, 8, 5, 10, 6, 
        1, 6, 5, 2, 6, 1, 
        1, 6, 5, 1, 2, 6, 3, 0, 8, 
        9, 6, 5, 9, 0, 6, 0, 2, 6, 
        5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, 
        2, 3, 11, 10, 6, 5, 
        11, 0, 8, 11, 2, 0, 10, 6, 5, 
        0, 1, 9, 2, 3, 11, 5, 10, 6, 
        5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, 
        6, 3, 11, 6, 5, 3, 5, 1, 3, 
        0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, 
        3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, 
        6, 5, 9, 6, 9, 11, 11, 9, 8, 
        5, 10, 6, 4, 7, 8, 
        4, 3, 0, 4, 7, 3, 6, 5, 10, 
        1, 9, 0, 5, 10, 6, 8, 4, 7, 
        10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, 
        6, 1, 2, 6, 5, 1, 4, 7, 8, 
        1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, 
        8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, 
        7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, 
        3, 11, 2, 7, 8, 4, 10, 6, 5, 
        5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, 
        0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, 
        9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, 
        8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, 
        5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, 
        0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, 
        6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, 
        10, 4, 9, 6, 4, 10, 
        4, 10, 6, 4, 9, 10, 0, 8, 3, 
        10, 0, 1, 10, 6, 0, 6, 4, 0, 
        8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, 
        1, 4, 9, 1, 2, 4, 2, 6, 4, 
        3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, 
        0, 2, 4, 4, 2, 6, 
        8, 3, 2, 8, 2, 4, 4, 2, 6, 
        10, 4, 9, 10, 6, 4, 11, 2, 3, 
        0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, 
        3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, 
        6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, 
        9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, 
        8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, 
        3, 11, 6, 3, 6, 0, 0, 6, 4, 
        6, 4, 8, 11, 6, 8, 
        7, 10, 6, 7, 8, 10, 8, 9, 10, 
        0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, 
        10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, 
        10, 6, 7, 10, 7, 1, 1, 7, 3, 
        1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, 
        2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, 
        7, 8, 0, 7, 0, 6, 6, 0, 2, 
        7, 3, 2, 6, 7, 2, 
        2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, 
        2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, 
        1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, 
        11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, 
        8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, 
        0, 9, 1, 11, 6, 7, 
        7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, 
        7, 11, 6, 
        7, 6, 11, 
        3, 0, 8, 11, 7, 6, 
        0, 1, 9, 11, 7, 6, 
        8, 1, 9, 8, 3, 1, 11, 7, 6, 
        10, 1, 2, 6, 11, 7, 
        1, 2, 10, 3, 0, 8, 6, 11, 7, 
        2, 9, 0, 2, 10, 9, 6, 11, 7, 
        6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, 
        7, 2, 3, 6, 2, 7, 
        7, 0, 8, 7, 6, 0, 6, 2, 0, 
        2, 7, 6, 2, 3, 7, 0, 1, 9, 
        1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, 
        10, 7, 6, 10, 1, 7, 1, 3, 7, 
        10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, 
        0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, 
        7, 6, 10, 7, 10, 8, 8, 10, 9, 
        6, 8, 4, 11, 8, 6, 
        3, 6, 11, 3, 0, 6, 0, 4, 6, 
        8, 6, 11, 8, 4, 6, 9, 0, 1, 
        9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, 
        6, 8, 4, 6, 11, 8, 2, 10, 1, 
        1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, 
        4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, 
        10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, 
        8, 2, 3, 8, 4, 2, 4, 6, 2, 
        0, 4, 2, 4, 6, 2, 
        1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, 
        1, 9, 4, 1, 4, 2, 2, 4, 6, 
        8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, 
        10, 1, 0, 10, 0, 6, 6, 0, 4, 
        4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, 
        10, 9, 4, 6, 10, 4, 
        4, 9, 5, 7, 6, 11, 
        0, 8, 3, 4, 9, 5, 11, 7, 6, 
        5, 0, 1, 5, 4, 0, 7, 6, 11, 
        11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, 
        9, 5, 4, 10, 1, 2, 7, 6, 11, 
        6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, 
        7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, 
        3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, 
        7, 2, 3, 7, 6, 2, 5, 4, 9, 
        9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, 
        3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, 
        6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, 
        9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, 
        1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, 
        4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, 
        7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, 
        6, 9, 5, 6, 11, 9, 11, 8, 9, 
        3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, 
        0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, 
        6, 11, 3, 6, 3, 5, 5, 3, 1, 
        1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, 
        0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, 
        11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, 
        6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, 
        5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, 
        9, 5, 6, 9, 6, 0, 0, 6, 2, 
        1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, 
        1, 5, 6, 2, 1, 6, 
        1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, 
        10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, 
        0, 3, 8, 5, 6, 10, 
        10, 5, 6, 
        11, 5, 10, 7, 5, 11, 
        11, 5, 10, 11, 7, 5, 8, 3, 0, 
        5, 11, 7, 5, 10, 11, 1, 9, 0, 
        10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, 
        11, 1, 2, 11, 7, 1, 7, 5, 1, 
        0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, 
        9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, 
        7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, 
        2, 5, 10, 2, 3, 5, 3, 7, 5, 
        8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, 
        9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, 
        9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, 
        1, 3, 5, 3, 7, 5, 
        0, 8, 7, 0, 7, 1, 1, 7, 5, 
        9, 0, 3, 9, 3, 5, 5, 3, 7, 
        9, 8, 7, 5, 9, 7, 
        5, 8, 4, 5, 10, 8, 10, 11, 8, 
        5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, 
        0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, 
        10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, 
        2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, 
        0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, 
        0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, 
        9, 4, 5, 2, 11, 3, 
        2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, 
        5, 10, 2, 5, 2, 4, 4, 2, 0, 
        3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, 
        5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, 
        8, 4, 5, 8, 5, 3, 3, 5, 1, 
        0, 4, 5, 1, 0, 5, 
        8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, 
        9, 4, 5, 
        4, 11, 7, 4, 9, 11, 9, 10, 11, 
        0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, 
        1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, 
        3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, 
        4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, 
        9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, 
        11, 7, 4, 11, 4, 2, 2, 4, 0, 
        11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, 
        2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, 
        9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, 
        3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, 
        1, 10, 2, 8, 7, 4, 
        4, 9, 1, 4, 1, 7, 7, 1, 3, 
        4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, 
        4, 0, 3, 7, 4, 3, 
        4, 8, 7, 
        9, 10, 8, 10, 11, 8, 
        3, 0, 9, 3, 9, 11, 11, 9, 10, 
        0, 1, 10, 0, 10, 8, 8, 10, 11, 
        3, 1, 10, 11, 3, 10, 
        1, 2, 11, 1, 11, 9, 9, 11, 8, 
        3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, 
        0, 2, 11, 8, 0, 11, 
        3, 2, 11, 
        2, 3, 8, 2, 8, 10, 10, 8, 9, 
        9, 10, 2, 0, 9, 2, 
        2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, 
        1, 10, 2, 
        1, 3, 8, 9, 1, 8, 
        0, 9, 1, 
        0, 3, 8,
    };

static const int triTableEntries[512] = {
        0, 0,
        0, 3,
        3, 3,
        6, 6,
        12, 3,
        15, 6,
        21, 6,
        27, 9,
        36, 3,
        39, 6,
        45, 6,
        51, 9,
        60, 6,
        66, 9,
        75, 9,
        84, 6,
        90, 3,
        93, 6,
        99, 6,
        105, 9,
        114, 6,
        120, 9,
        129, 9,
        138, 12,
        150, 6,
        156, 9,
        165, 9,
        174, 12,
        186, 9,
        195, 12,
        207, 12,
        219, 9,
        228, 3,
        231, 6,
        237, 6,
        243, 9,
        252, 6,
        258, 9,
        267, 9,
        276, 12,
        288, 6,
        294, 9,
        303, 9,
        312, 12,
        324, 9,
        333, 12,
        345, 12,
        357, 9,
        366, 6,
        372, 9,
        381, 9,
        390, 6,
        396, 9,
        405, 12,
        417, 12,
        429, 9,
        438, 9,
        447, 12,
        459, 12,
        471, 9,
        480, 12,
        492, 15,
        507, 15,
        522, 6,
        528, 3,
        531, 6,
        537, 6,
        543, 9,
        552, 6,
        558, 9,
        567, 9,
        576, 12,
        588, 6,
        594, 9,
        603, 9,
        612, 12,
        624, 9,
        633, 12,
        645, 12,
        657, 9,
        666, 6,
        672, 9,
        681, 9,
        690, 12,
        702, 9,
        711, 12,
        723, 12,
        735, 15,
        750, 9,
        759, 12,
        771, 12,
        783, 15,
        798, 12,
        810, 15,
        825, 15,
        840, 12,
        852, 6,
        858, 9,
        867, 9,
        876, 12,
        888, 9,
        897, 12,
        909, 6,
        915, 9,
        924, 9,
        933, 12,
        945, 12,
        957, 15,
        972, 12,
        984, 15,
        999, 9,
        1008, 6,
        1014, 9,
        1023, 12,
        1035, 12,
        1047, 9,
        1056, 12,
        1068, 15,
        1083, 9,
        1092, 6,
        1098, 12,
        1110, 15,
        1125, 15,
        1140, 12,
        1152, 15,
        1167, 6,
        1173, 12,
        1185, 3,
        1188, 3,
        1191, 6,
        1197, 6,
        1203, 9,
        1212, 6,
        1218, 9,
        1227, 9,
        1236, 12,
        1248, 6,
        1254, 9,
        1263, 9,
        1272, 12,
        1284, 9,
        1293, 12,
        1305, 12,
        1317, 9,
        1326, 6,
        1332, 9,
        1341, 9,
        1350, 12,
        1362, 9,
        1371, 12,
        1383, 12,
        1395, 15,
        1410, 9,
        1419, 6,
        1425, 12,
        1437, 9,
        1446, 12,
        1458, 9,
        1467, 15,
        1482, 6,
        1488, 6,
        1494, 9,
        1503, 9,
        1512, 12,
        1524, 9,
        1533, 12,
        1545, 12,
        1557, 15,
        1572, 9,
        1581, 12,
        1593, 12,
        1605, 15,
        1620, 12,
        1632, 15,
        1647, 15,
        1662, 12,
        1674, 9,
        1683, 12,
        1695, 12,
        1707, 9,
        1716, 12,
        1728, 15,
        1743, 15,
        1758, 12,
        1770, 12,
        1782, 9,
        1791, 15,
        1806, 6,
        1812, 15,
        1827, 12,
        1839, 6,
        1845, 3,
        1848, 6,
        1854, 9,
        1863, 9,
        1872, 12,
        1884, 9,
        1893, 12,
        1905, 12,
        1917, 15,
        1932, 9,
        1941, 12,
        1953, 12,
        1965, 15,
        1980, 6,
        1986, 9,
        1995, 9,
        2004, 6,
        2010, 9,
        2019, 12,
        2031, 12,
        2043, 15,
        2058, 12,
        2070, 15,
        2085, 15,
        2100, 6,
        2106, 12,
        2118, 9,
        2127, 15,
        2142, 12,
        2154, 9,
        2163, 6,
        2169, 12,
        2181, 3,
        2184, 9,
        2193, 12,
        2205, 12,
        2217, 15,
        2232, 12,
        2244, 15,
        2259, 9,
        2268, 12,
        2280, 12,
        2292, 15,
        2307, 15,
        2322, 6,
        2328, 9,
        2337, 12,
        2349, 6,
        2355, 3,
        2358, 6,
        2364, 9,
        2373, 9,
        2382, 6,
        2388, 9,
        2397, 12,
        2409, 6,
        2415, 3,
        2418, 9,
        2427, 6,
        2433, 12,
        2445, 3,
        2448, 6,
        2454, 3,
        2457, 3,
        2460, 0,
};

StructuredBuffer<float> u_Grid;
RWStructuredBuffer<float3> u_Vertices;
RWStructuredBuffer<int> u_IndexCounter;
uint3 u_WorkSize;
float u_Boundry;
float u_Scale;
float u_PrimitiveRadius;

const static uint totalNumThreads = GROUP_SIZE_X * GROUP_SIZE_Y * GROUP_SIZE_Z;
const static uint3 gridCacheSize = int3(GROUP_SIZE_X + 1, GROUP_SIZE_Y + 1, GROUP_SIZE_Z + 1);
const static uint gridCacheLength = gridCacheSize.x * gridCacheSize.y * gridCacheSize.z;
groupshared float gridCache[gridCacheLength];
float GetFromGrid(uint x, uint y, uint z)
{
    return u_Grid[x + (u_WorkSize.x + 1) * (z + y * (u_WorkSize.z + 1) )];
}

float GetFromGridCache(uint x, uint y, uint z)
{
    return gridCache[x + gridCacheSize.x * (z + y * gridCacheSize.z)];
}

float3 GetMarchingCubesVertex(float3 pos, float3 vert0, float val0, float3 vert1, float val1)
{
    float3 temp = pos + (vert0 + (u_Boundry - val0) * (vert1 - vert0) / (val1 - val0)) * u_Scale;
    return float3(((int)(temp.x * 100.0 + 0.5)) / 100.0, ((int)(temp.y * 100.0 + 0.5)) / 100.0, ((int)(temp.z * 100.0 + 0.5)) / 100.0);
}

[numthreads(GROUP_SIZE_X,GROUP_SIZE_Y,GROUP_SIZE_Z)]
void MarchingCubesKernel (uint3 id : SV_DispatchThreadID, uint3 groupId : SV_GroupID, uint3 tId : SV_GroupThreadID)
{
    // fill the shared memory
    uint localId = tId.x + GROUP_SIZE_X * (tId.z + tId.y * GROUP_SIZE_Z);
    uint3 groupCornerPos = uint3(groupId.x * GROUP_SIZE_X, groupId.y * GROUP_SIZE_Y, groupId.z * GROUP_SIZE_Z);
    uint3 gridId = groupCornerPos + uint3(localId % gridCacheSize.x, localId / (gridCacheSize.x * gridCacheSize.z), (localId / gridCacheSize.x) % gridCacheSize.z);
    
    if (gridId.x < u_WorkSize.x || gridId.y < u_WorkSize.y || gridId.z < u_WorkSize.z) 
    {
        gridCache[localId] = GetFromGrid(gridId.x, gridId.y, gridId.z);
    }
    localId += totalNumThreads;
    if (localId < gridCacheLength)
    {
        gridId = groupCornerPos + uint3(localId % gridCacheSize.x, localId / (gridCacheSize.x * gridCacheSize.z), (localId / gridCacheSize.x) % gridCacheSize.z);
        if (gridId.x < u_WorkSize.x || gridId.y < u_WorkSize.y || gridId.z < u_WorkSize.z) 
        {
            gridCache[localId] = GetFromGrid(gridId.x, gridId.y, gridId.z);
        }
    }

    GroupMemoryBarrierWithGroupSync();

    if (id.x >= u_WorkSize.x || id.y >= u_WorkSize.y || id.z >= u_WorkSize.z) return;

    // marching cubes
    float cubeValues[8];
    cubeValues[0] = GetFromGridCache(tId.x    , tId.y    , tId.z + 1);
    cubeValues[1] = GetFromGridCache(tId.x + 1, tId.y    , tId.z + 1);
    cubeValues[2] = GetFromGridCache(tId.x + 1, tId.y    , tId.z    );
    cubeValues[3] = GetFromGridCache(tId.x    , tId.y    , tId.z    );
    cubeValues[4] = GetFromGridCache(tId.x    , tId.y + 1, tId.z + 1);
    cubeValues[5] = GetFromGridCache(tId.x + 1, tId.y + 1, tId.z + 1);
    cubeValues[6] = GetFromGridCache(tId.x + 1, tId.y + 1, tId.z    );
    cubeValues[7] = GetFromGridCache(tId.x    , tId.y + 1, tId.z    );

    int cubeIndex = 0;
    int i = 0;
    for (i = 0; i < 8; i++)
    {
        if (cubeValues[i] >= u_Boundry) cubeIndex |= 1 << i;
    }

    cubeIndex *= 2;
    int startIndex = triTableEntries[cubeIndex];
    int endIndex = startIndex + triTableEntries[cubeIndex + 1];

    int numVerticesToAdd = 0;
    float3 verticesToAdd[15];

    for (i = startIndex; i < endIndex; i += 3)
    {
        int edgeIndex = triTable[i] * 2;
        int a0 = edgeConnections[edgeIndex];
        int a1 = edgeConnections[edgeIndex + 1];
        
        edgeIndex = triTable[i + 1] * 2;
        int b0 = edgeConnections[edgeIndex];
        int b1 = edgeConnections[edgeIndex + 1];
        
        edgeIndex = triTable[i + 2] * 2;
        int c0 = edgeConnections[edgeIndex];
        int c1 = edgeConnections[edgeIndex + 1];
    
        float3 pos = float3(id.x - u_WorkSize.x / 2.0, id.y - u_PrimitiveRadius, id.z - u_WorkSize.z / 2.0) * u_Scale;
        
        float3 vertexPos1 = GetMarchingCubesVertex(pos, cubeCorners[a0], cubeValues[a0], cubeCorners[a1], cubeValues[a1]);
        float3 vertexPos2 = GetMarchingCubesVertex(pos, cubeCorners[b0], cubeValues[b0], cubeCorners[b1], cubeValues[b1]);
        float3 vertexPos3 = GetMarchingCubesVertex(pos, cubeCorners[c0], cubeValues[c0], cubeCorners[c1], cubeValues[c1]);

        verticesToAdd[numVerticesToAdd++] = vertexPos1;
        verticesToAdd[numVerticesToAdd++] = vertexPos2;
        verticesToAdd[numVerticesToAdd++] = vertexPos3;
    }

    if (numVerticesToAdd == 0) return;
    int index;
    InterlockedAdd(u_IndexCounter[0], numVerticesToAdd, index);
    for (i = 0; i < numVerticesToAdd; i++)
    {
        int globalIndex = index + i;
        u_Vertices[globalIndex] = verticesToAdd[i];
    }
}
